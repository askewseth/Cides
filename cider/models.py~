from __future__ import unicode_literals

from django.db import models

# Create your models here.

from datetime import datetime
from time import strftime

class UnixTimestampField(models.DateTimeField):
    """UnixTimestampField: creates a DateTimeField that is represented on the
    database as a TIMESTAMP field rather than the usual DATETIME field.
    """
    def __init__(self, null=False, blank=False, **kwargs):
        super(UnixTimestampField, self).__init__(**kwargs)
        # default for TIMESTAMP is NOT NULL unlike most fields, so we have to
        # cheat a little:
        self.blank, self.isnull = blank, null
        self.null = True # To prevent the framework from shoving in "not null".

    def db_type(self, connection):
        typ=['TIMESTAMP']
        # See above!
        if self.isnull:
            typ += ['NULL']
        if self.auto_created:
            typ += ['default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP']
        return ' '.join(typ)

    def to_python(self, value):
        if isinstance(value, int):
            return datetime.fromtimestamp(value)
        else:
            return models.DateTimeField.to_python(self, value)

    def get_db_prep_value(self, value, connection, prepared=False):
        if value==None:
            return None
        # Use '%Y%m%d%H%M%S' for MySQL < 4.1
        return strftime('%Y-%m-%d %H:%M:%S',value.timetuple())




class User(models.Model):
    name = models.CharField(max_length=30)
    phone_number = models.CharField(max_length=50)
    email = models.CharField(max_length=30)
    def __str__(self):
        return self.name
    def changeName(self, newname):
        self.name = newname
    def changeEmail(self, newemail):
        self.email = newemail
    def changeNumber(self, newnumber):
        self.phone_number = newnumber

class Question(models.Model):
    user_id = models.IntegerField()
    question_text = models.CharField(max_length=500)
    timestamp = UnixTimestampField(auto_created=True)
    def __str__(self):
        return self.question_text
    def getAnswers(self):
        return Answer.objects.filter(question_id = self.id)

class Answer(models.Model):
    question_id = models.IntegerField()
    answer_text = models.CharField(max_length=500)
    up_votes = models.IntegerField(default=int(0))
    down_votes = models.IntegerField(default=int(0))
    def __str__(self):
        return self.answer_text
    def getVotes(self):
        return self.up_votes-self.down_votes
    def accepted(self, cutoff):
        return self.getVotes() >= cutoff
    def upVote(self):
        self.up_votes = self.up_votes + 1
    def downVote(self):
        self.down_votes = self.down_votes + 1
    def editAnswer(self, new_answer):
        self.answer_text = new_answer
    def getQuestion(self):
        try:
            return Question.objects.get(pk = self.question_id)
        except: 
            return None
        

